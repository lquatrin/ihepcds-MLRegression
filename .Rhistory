t <- 0
N <- 0
tries <- 0
while (TRUE)
{
u <- runif(1)
t <- t - log(u)/mlambda(t)
if (t > T)
{
break
}
u1 <- runif(1)
tries <- tries + 1
if (u1 < mlambda(t)/lambda)
{
S <- c(S, t)
N <- N + 1
}
}
tries
}
poissonnonhomogeneous(20, 10)
mlambda <- function (lt)
{
lambda <- lt+10
lambda
}
# mlambda(t) <= lambda
poissonnonhomogeneous <- function (lambda, T)
{
S <- NULL
t <- 0
N <- 0
tries <- 0
while (TRUE)
{
u <- runif(1)
t <- t - log(u)/mlambda(t)
if (t > T)
{
break
}
u1 <- runif(1)
tries <- tries + 1
if (u1 < mlambda(t)/lambda)
{
S <- c(S, t)
N <- N + 1
}
}
R <- N/tries
R
}
poissonnonhomogeneous(20,1)
poissonnonhomogeneous(20,10)
mlambda <- function (lt)
{
lambda <- lt+10
lambda
}
# mlambda(t) <= lambda
poissonnonhomogeneous <- function (lambda, T, lambdafunction)
{
S <- NULL
t <- 0
N <- 0
tries <- 0
while (TRUE)
{
u <- runif(1)
t <- t - log(u)/lambdafunction(t)
if (t > T)
{
break
}
u1 <- runif(1)
tries <- tries + 1
if (u1 < lambdafunction(t)/lambda)
{
S <- c(S, t)
N <- N + 1
}
}
R <- N/tries
R
}
# mlambda(t) <= lambda
poissonnonhomogeneous <- function (lambda, T, lambdafunction)
{
S <- NULL
t <- 0
N <- 0
tries <- 0
while (TRUE)
{
u <- runif(1)
t <- t - log(u)/lambdafunction(t)
if (t > T)
{
break
}
u1 <- runif(1)
tries <- tries + 1
if (u1 < lambdafunction(t)/lambda)
{
S <- c(S, t)
N <- N + 1
}
}
R <- N/tries
R
}
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
poissonnonhomogeneous(20,10,mlambda)
mgamma <- function (n, lambdag)
{
u <- 1
for (i in 1:n)
{
u <- u * runif(1)
}
X <- -log(u)/lambdag
X
}
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (2, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 1)
mgamma (10, 10)
mgamma (10, 10)
mgamma (10, 10)
mgamma (10, 10)
mgamma (10, 10)
mgamma (10, 10)
mgamma (10, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgamma (100, 10)
mgammaRejection(2,1,(4/exp(1)))
mgamma <- function (n, lambdag)
{
u <- 1
for (i in 1:n)
{
u <- u * runif(1)
}
X <- -log(u)/lambdag
X
}
gammaPx <- function (n, lamb, x)
{
fat <- 1
for (i in 1:(n-1))
{
fat <- fat * i
}
X <- lamb*exp(-lamb*x)*(lamb*x)^(n-1)
X
}
mgammaRejection <- function (n, lambdag, c)
{
lambdaexp <- lambdag/n
while(TRUE)
{
uexp <- runif(1)
Y <- -log(uexp)/lambdaexp
urej <- runif(1)
if (urej < ( (gammaPx(n, lambdag, Y)) /(c * lambdaexp * exp(-lambdaexp*Y))))
{
X <- Y
break
}
}
X
}
exp(1)
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgammaRejection(2,1,(4/exp(1)))
mgamma(2,1,(4/exp(1)))
mgamma <- function (n, lambdag)
{
u <- 1
for (i in 1:n)
{
u <- u * runif(1)
}
X <- -log(u)/lambdag
X
}
gammaPx <- function (n, lamb, x)
{
fat <- 1
for (i in 1:(n-1))
{
fat <- fat * i
}
X <- lamb*exp(-lamb*x)*(lamb*x)^(n-1)
X
}
mgammaRejection <- function (n, lambdag, c)
{
lambdaexp <- lambdag/n
while(TRUE)
{
uexp <- runif(1)
Y <- -log(uexp)/lambdaexp
urej <- runif(1)
if (urej < ( (gammaPx(n, lambdag, Y)) /(c * lambdaexp * exp(-lambdaexp*Y))))
{
X <- Y
break
}
}
X
}
testgamma <- function (nsim, n, l)
{
X <- c(1:nsim)
for (i in 1:nsim)
{
X[i] <- mgamma(n,l)
}
X
}
testgammarejection <- function (nsim, n, l, c)
{
X <- c(1:nsim)
for (i in 1:nsim)
{
X[i] <- mgammaRejection(n,l, c)
}
X
}
testgamma(1000, 2,1)
X <- testgamma(2,1)
X <- testgamma(1000,2,1)
hist(X)
X <- testgamma(10000,2,1)
hist(X)
Y <- testgammaRejection (10000, 2,1,4/exp(1))
Y <- testgammarejection (10000, 2,1,4/exp(1))
hist(Y)
hist(X)
hist(Y)
hist(X)
Y <- testgammarejection (10000, 2,1,4/exp(1))
hist(Y)
q()
p = 1
read.table("C:\Users\lquatrin\Downloads\household_power_consumption/household_power_consumption.txt", header=T, sep=";")
read.table("C:/Users\lquatrin\Downloads\household_power_consumption/household_power_consumption.txt", header=T, sep=";")
read.table("C:/Users/lquatrin/Downloads/household_power_consumption/household_power_consumption.txt", header=T, sep=";")
View(gammaPx)
tab = read.table("C:\Users\lquatrin\Downloads\household_power_consumption/household_power_consumption.txt", header=T, sep=";")
dataset = read.table("C:/Users/lquatrin/Downloads/household_power_consumption/household_power_consumption.txt", header=T, sep=";")
View(dataset)
View(dataset)
dataset]
dataset[1]
dataset[1].Date
dataset(1).Date
dataset[1].Date
dataset[1][1]
dataset[1].Date
dataset[1, "Date"]
dataset[1, "Time"]
dataset[1, "Time"]
dataset[1, "Time"]
dataset[1, "Global_reactive_power"]
a = dataset[1, "Global_reactive_power"]
a
a
print(a)
print(a*2)
dataset[1, "Date"]
dataset[["Date"]][1]
dataset["Date", 1]
dataset[["Date"]][1]
dataset[["Date"]][1].character
dataset[["Date"]][1]
dataset[["Date"]].character[1]
dataset[["Date"]].character[1]
dataset["Date"].character[1]
dataset[["Date"]].character
t =dataset[["Date"]].character
t =dataset["Date"].character
t =dataset[1,1]
t
t = dataset[1,2]
t
dataset[1,2]
dataset[1,2]
dataset[1,2].character
dataset[1,2]
dataset[1,2].character
t = factor(dataset[1,2])
t
levels(t)
levels(factor(dataset[1,2]))
levels(factor(dataset[1,3]))
levels(factor(dataset[1,4]))
double(levels(factor(dataset[1,4])))
droplevels(dataset[1,4]))
droplevels(dataset[1,4])
droplevels(dataset[1,4])
as.numeric(factor(dataset[1,4]))
as.numeric(factor(dataset[2,4]))
as.numeric(factor(dataset[1,4]))
dataset$Date[1]
dataset$Date
dataset$Date[3]
droplevels(dataset$Date[3])
dataset$Date[3]
as.character(dataset$Date[3])
as.character(dataset$Global_active_power[3])
as.character(dataset$Global_active_power[1])
dataset = read.table("C:/Users/lquatrin/Downloads/household_power_consumption/household_power_consumption.txt", header=T, sep=";", as.is = TRUE)
dataset$Global_active_power[3]
dataset$Global_active_power[2]
clear
rm(list=ls())
dataset = read.table("C:/Users/lquatrin/Downloads/household_power_consumption/household_power_consumption.txt", header=T, sep=";", as.is = TRUE)
dataset$Voltage[3]
as.numeric(dataset$Voltage[3])
as.numeric(dataset$Voltage[3]) * as.numeric(dataset$Voltage[4])
dataset$Date[3]
dataset$Date[2000000]
dataset$Date[1000000]
ncol(dataset)
nrow(dataset)
x = 2 * 4
x
x
x
x
x
x
2 * 4 + 7
View(dataset)
setwd("E:/GitHub/ihepcds-MLRegression")
source("read_table.r")
ls
ls()
ls()
rm(all)
source("read_table.r")
View(dataset)
dataset[seq[1,50,1],]
dataset[seq(1,50,1),]
